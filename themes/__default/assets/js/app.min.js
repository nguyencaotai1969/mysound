"use strict";
var pre_pos_top = null,
	pos_active = !1,
	button_opened = null,
	$upload_started = !1,
	$__dropzone = null;

function position_menu(t, e) {
	e = e || "ul";
	var a = $(window).width(),
		n = $(window).height(),
		o = $(t).find(e),
		i = o.width(),
		l = o.height(),
		s = 0,
		d = 0,
		c = $(t).offset().left,
		r = $(t).offset().top,
		u = $(t).height();
	(s = c - (i - $(t).width()) / 2) + i > a - 20 && (s = a - (i + 20)), (d = r + u + 20) + l > n - 80 && (d = r - (u + l)), d < 0 && (d = 60), o.css("right", "auto"), o.css("bottom", "auto"), o.css("left", s + "px"), o.css("top", d + "px"), d + l > n + 70 - 20 && (o.css("overflow", "auto"), o.css("height", n - 70 - d - 20 + "px"))
}

function get_nots(t, e, a) {
	t = !0 === t, e = e || 1, be_cli({
		action: "user_get_nots",
		data: {
			page: e,
			full: t,
			hash: $_play_hash
		},
		callBack_param: a,
		callBack: function(e, a, n) {
			t ? ($(".buttons.nots").removeClass("new"), $(".buttons.nots").find(".count").remove(), n.html(a), pager.bind_links()) : (a > 0 && ($(".buttons.nots").find(".count").remove(), $(".buttons.nots").append("<div class='count'>" + a + "</div>"), $(".buttons.nots").addClass("new"), $(".nots_btn").hasClass("active") && get_nots(!0, 1, $(".nots_ul"))), setTimeout(function() {
				get_nots(!1)
			}, 12e3))
		}
	})
}

function decode_htmlspecialchars(t) {
	var e = {
		"&amp;": "&",
		"&#038;": "&",
		"&#38;": "&",
		"&lt;": "<",
		"&gt;": ">",
		"&quot;": '"',
		"&#039;": "'",
		"&#39;": "'",
		"&#8217;": "’",
		"&#8216;": "‘",
		"&#8211;": "–",
		"&#8212;": "—",
		"&#8230;": "…",
		"&#8221;": "”"
	};
	return t.replace(/\&[\w\d\#]{2,5}\;/g, function(t) {
		return e[t]
	})
}

function starter() {
	"undefined" != typeof pager && (style_navbar(), pager.set_menu(), pager.page_title = $(document).find("title").text(), window.history && window.history.pushState && $(window).on("popstate", function() {
		pager.page_load(window.location.href, !1)
	}), pager.load_start(), pager.set_type(), pager.page_load_images(), be_cli_forms_hook(), pager.bind(), $_user_id && $_not_enabled && get_nots(!1))
}

function style_navbar() {
	var t = $("#scroller").scrollTop();
	t > $("#nav").outerHeight() / 3 ? $("#nav").removeClass("attached").addClass("floating") : $("#nav").addClass("attached").removeClass("floating"), !pre_pos_top || pre_pos_top > t ? $("#nav").removeClass("goingBot").addClass("goingTop") : $("#nav").addClass("goingBot").removeClass("goingTop"), pre_pos_top = t
}

function check_wsnw() {
	$(".wsnw").each(function(t, e) {
		var a = $(e),
			n = a.outerWidth();
		a.find(".wsnwe").outerWidth() > n ? a.addClass("has_more") : a.hasClass("has_more") && a.removeClass("has_more")
	})
}

function add_fund_modal() {
	closeModal();
	var t = 0,
		e = "";
	$_config.pg_pp && (t++, e = e + '<div class="_c_w paypal online_gateway" data-name="paypal">' + $_texts.paypal + "</div>"), $_config.pg_st && (t++, e = e + '<div class="_c_w stripe online_gateway" data-name="stripe">' + $_texts.stripe + "</div>"), $_config.pg_kk && (t++, e += '<div class="_c_w other online_gateway" data-name="kkiapay">KKiaPay</div>'), $_config.pg_ps && (t++, e += '<div class="_c_w other online_gateway" data-name="paystack">Paystack</div>'), $_config.pg_op && (t++, e = e + '<div class="_c_w bank">' + $_texts.bank_tf + "</div>"), e = 0 == t ? $_texts.no_pay_method : '<label class="_c_ws_l">' + $_texts.pay_method + '</label><div class="_c_ws c_' + t + '">' + e + "</div>", createModal({
		class: "type2 add_fund add_fund_main",
		title: $_texts.add_fund_title,
		inputs: [{
			name: "amount",
			label: $_texts.dep_amount,
			placeholder: $_texts.dep_amount_tip,
			type: "text"
		}],
		content: e
	})
}

function add_fund_online_gateway(t) {
	var e = getModal(!0).amount;
	be_cli({
		action: "user_proceed_payment",
		data: {
			amount: e,
			name: t
		},
		domTarget: ".watermark",
		callBack_param: t,
		callBack: function(t, a, n) {
			if (t) {
				if ($(document).find(".watermark").text($_texts.wait), "stripe" == n) return stripe(a);
				if ("kkiapay" == n) return kkiapay(a, e);
				window.location = a
			}
		}
	})
}

function stripe(t) {
	$.getScript("https://js.stripe.com/v3/").done(function(e, a) {
		Stripe($_config.pg_st_key).redirectToCheckout({
			sessionId: t
		}).then(function(t) {
			console.log(t)
		}).catch(function(t) {
			console.log(t)
		})
	})
}

function kkiapay(t, e) {
	$.getScript("https://cdn.kkiapay.me/k.js").done(function(a, n) {
		openKkiapayWidget({
			amount: e,
			callback: $_home + "/user_pay_result?og=kkiapay&on=" + t,
			key: $_config.pg_kk_key,
			sandbox: $_config.pg_kk_mode
		})
	})
}

function add_fund_bank() {
	be_cli({
		action: "user_bank_transfer",
		data: {
			amount: getModal(!0).amount
		},
		domTarget: ".watermark",
		callBack: function(t, e) {
			t && (closeModal(), $(document).find(".watermark").remove(), createModal(JSON.parse(e)), be_cli_forms_hook())
		}
	})
}

function sortable_table(t) {
	var e = t.action ? t.action : "user_act_sort_playlist",
		a = t.table ? t.table : ".table_wrapper table tbody",
		n = t.handle ? t.handle : ".mdi-sort",
		o = t.item ? t.item : ".table_wrapper table tbody tr",
		i = t.hook_type ? t.hook_type : "playlist_hash",
		l = t.hook;
	$(a).sortable({
		handle: n,
		update: function() {
			var t = [];
			$(o).each(function() {
				var e = $(this).attr("class").split(" ");
				$.each(e, function(e, a) {
					"track_dom_" == a.substr(0, 10) && t.push(a.substr(10))
				})
			});
			var a = {
				hashes: t.join(",")
			};
			a[i] = l, be_cli({
				action: e,
				data: a,
				domTarget: ".watermark",
				callBack: function(t, e) {
					t && pager.page_reload(!1)
				}
			})
		}
	})
}

function submitFeedSetting() {
	var t = {
		feed: [],
		not: [],
		email: []
	};
	$(".feed_setting input[type=checkbox]:checked").each(function(e) {
		var a = $(this).attr("name").split("_"),
			n = a[0],
			o = a[1];
		t[n].push(o)
	}), be_cli({
		action: "user_setting_feed_setting",
		data: {
			feed: t.feed.join(","),
			not: t.not.join(","),
			email: t.email.join(",")
		},
		domTarget: ".watermark",
		callBack: "check_user_setting_response",
		callBack_param: "feed_setting"
	})
}

function create_playlist_modal() {
	createModal({
		class: "create_playlist",
		content_before: '<div class="icon"><span class="mdi mdi-playlist-plus"></span></div><div class="title">create new playlist</div><div class="text">Choose a name for your new playlist</div><input type="text" class="form-control" name="name" placeholder=""><div class="pl_res"></div><div class="buttons"><a class="m_cp_a btn btn-secondary btn-sm">Create</a></div>'
	})
}

function create_playlist() {
	be_cli({
		action: "user_act_create_playlist",
		data: {
			name: getModal(!0).name
		},
		domTarget: ".pl_res",
		callBack: function(t, e) {
			if (t) return pager.page_load($_home + "user/" + $_user_name + "/playlists"), closeModal(), !1
		}
	})
}

function remove_playlist_modal(t) {
	createModal({
		class: "playlist small",
		content_before: '<div class="icon"><span class="mdi mdi-minus-circle-outline"></span></div><div class="title">' + $_texts.remove_playlist + '</div><div class="text">' + $_texts.confirm_action + '</div><div class="pl_res"></div><div class="buttons"><a data-hook="' + t + '" class="m_rp_a btn btn-secondary btn-sm">' + $_texts.remove + "</a></div>"
	})
}

function remove_playlist(t) {
	be_cli({
		action: "user_act_remove_playlist",
		data: {
			hash: t
		},
		domTarget: ".pl_res",
		callBack: function(t, e) {
			if (t) return $(document).find(".pl_res").text($_texts.removed), pager.page_reload(), closeModal(), !1
		}
	})
}

function remove_track_from_playlist(t) {
	be_cli({
		action: "user_act_lessen_playlist",
		data: {
			track_hash: t,
			playlist_hash: $(document).find(".playlist").attr("data-id")
		},
		domTarget: ".watermark",
		callBack: function(t, e) {
			t && pager.page_reload(!1)
		}
	})
}

function follow_target(t) {
	be_cli({
		action: "user_act_follow",
		domTarget: ".watermark",
		data: {
			target: t
		},
		callBack: function(t, e) {
			t && pager.page_reload()
		}
	})
}

function redirect_to_item(t, e, a) {
	pager.load_start(), "db" == t && pager.page_load(a), "spotify" == t && be_cli({
		action: "spotify_create",
		data: {
			qn: "",
			type: e,
			hook: a
		},
		callBack: function(t, e) {
			if (!t) return pager.load_finish(), alert(e), !1;
			pager.page_load(e)
		}
	})
}

function scroll_to(t) {
	$([document.documentElement, document.body]).animate({
		scrollTop: $(t).offset().top - 70
	}, 800)
}

function end_session(t) {
	be_cli({
		action: "user_setting_end_session",
		data: {
			ID: t
		},
		domTarget: ".watermark",
		callBack: function() {
			setTimeout(function() {
				pager.page_reload()
			}, 500)
		}
	})
}

function toggleUploadList() {
	$("#uploading").hasClass("opened") ? $("#uploading").removeClass("opened") : $("#uploading").addClass("opened")
}

function delete_comment(t) {
	be_cli({
		action: "user_act_delete_comment",
		data: {
			ID: t
		},
		callBack: function(t, e) {
			t && pager.page_reload(!1)
		}
	})
}

function like_comment(t) {
	be_cli({
		action: "user_act_like_comment",
		domTarget: ".watermark",
		data: {
			ID: t
		},
		callBack_param: t,
		callBack: function(t, e, a) {
			t && pager.page_reload(!1)
		}
	})
}

function __up(t, e, a) {
	for (var n = 0, o = 0, i = 0, l = 0, s = 0; s < t.files.length; s++) {
		if (100 == t.files[s].upload.progress && "uploading" == t.files[s].status) return;
		i += t.files[s].size, l += ("error" == t.files[s].status ? 0 : t.files[s].upload.progress) * t.files[s].size / 100, n++, 100 == ("error" == t.files[s].status ? 0 : t.files[s].upload.progress) && o++
	}
	var d = o + "/" + n + " " + $_texts.upload_progress + "<span class='tul_handle'></span>";
	$("#uploader .prg .text").text() != d.replace(/(<([^>]+)>)/gi, "") && $("#uploader .prg .text").html(d), $("#uploader .prg .progress-bar").css("width", Math.round(l / i * 100) + "%")
}

function __ini() {
	this.on("complete", function(t) {
		__up(this, t, !1)
	}), this.on("canceled", function(t) {
		__up(this, t, !1)
	}), this.on("addedfile", function(t) {
		$upload_started || $("#uploader .progress").fadeIn(400), $upload_started = !0, $("#uploader").hasClass("ready") && ($("#uploader .continue").hide(100), $("#uploader").animate({
			height: "300px"
		}, 200), $("#uploader").removeClass("ready"))
	}), this.on("uploadprogress", function(t) {
		__up(this, t, !0)
	}), this.on("queuecomplete", function() {
		$("#uploader").animate({
			height: "340px"
		}, 400, function() {
			$("#uploader .continue").delay(400).show("slow"), $("#uploader").addClass("ready")
		})
	})
}

function check_login_result(t, e) {
	t && (window.location = $_home)
}

function check_user_setting_response(t, e, a) {
	t && pager.page_load($_home + "user_setting?n=" + a)
}

function check_signup_result(t, e) {
	t && (window.location = $_home)
}

function updateUploadingTrackData() {
	be_cli({
		action: "user_update_uploading_track",
		data: getModal(!0),
		domTarget: ".watermark",
		callBack: "updatedUploadingTrackData"
	})
}

function updateUploadingAlbumData() {
	be_cli({
		action: "user_update_uploading_album",
		data: getModal(!0),
		domTarget: ".watermark",
		callBack: "updatedUploadingAlbumData"
	})
}

function updatedUploadingTrackData(t, e) {
	t && pager.page_reload()
}

function updatedUploadingAlbumData(t, e) {
	t && pager.page_reload()
}

function updated_uploading_cover(t, e) {
	t && pager.page_reload()
}

function updated_waveform(t, e, a) {
	t ? $("body").find("#tr_" + a + " .waveform").html('<span class="mdi mdi-check-circle"></span>') : $("body").find("#tr_" + a + " .waveform").text("failed"), setTimeout(function() {
		createWaveform()
	}, 200)
}

function finalize_edit() {
	be_cli({
		action: "user_update_finalize_edit",
		domTarget: ".watermark",
		background: !1,
		callBack: function(t, e) {
			t ? pager.page_load($_home + "user/" + $_user_name + "/uploads") : pager.page_reload()
		}
	})
}

function createTrackEditModal(t) {
	var e = $__tracks[t];
	createModal({
		title: $_texts.upload_edit_t_title,
		tip: e.originalName,
		class: "edit track type2",
		inputs: [{
			type: "hidden",
			name: "rID",
			value: e.rID
		}, {
			type: "hidden",
			name: "uploadID",
			value: $__upload_id
		}, {
			type: "text",
			name: "title",
			value: e.title,
			label: $_texts.title,
			group: "a"
		}, {
			type: "text",
			name: "artist_name",
			value: e.artist_name,
			label: $_texts.artist,
			group: "a"
		}, {
			type: "text",
			name: "artists_featured",
			value: e.artists_featured,
			label: $_texts.featured_artists,
			group: "a",
			tip: $_texts.featured_artists_tip
		}, {
			type: "select",
			name: "album_type",
			label: $_texts.album_type,
			group: "a",
			value: e.album_type,
			values: [
				["single", "Single"],
				["studio", "Studio"],
				["compilation", "Compilation"],
				["mixtape", "Mixtape"]
			],
			attr: " onChange=\"$(document).find('.modal').find('.nalbum_title').show(); $(document).find('.modal').find('.nalbum_order').show(); $(document).find('.modal').find('.nalbum_artist_name').show(); if( $(this).val() == 'single' || $(this).val() == 'compilation' ) $(document).find('.modal').find('.nalbum_artist_name').hide(); if( $(this).val() == 'single' ) { $(document).find('.modal').find('.nalbum_title').hide(); $(document).find('.modal').find('.nalbum_order').hide(); }\""
		}, {
			type: "text",
			name: "album_title",
			value: e.album_title,
			label: $_texts.album_title,
			group: "a"
		}, {
			type: "text",
			name: "album_artist_name",
			value: e.album_artist_name,
			label: $_texts.album_artist,
			group: "a"
		}, {
			type: "text",
			name: "album_order",
			value: e.album_order,
			label: $_texts.album_order,
			group: "a"
		}, {
			type: "select",
			name: "genre",
			value: e.genre,
			label: $_texts.genre,
			group: "a",
			values: $__genres
		}, {
			type: "textarea",
			name: "comment",
			value: e.comment,
			label: $_texts.description,
			group: "a"
		}, {
			type: "textarea",
			name: "lyrics",
			label: $_texts.lyrics,
			value: e.lyrics,
			group: "b"
		}, {
			type: "text",
			name: "file_name",
			value: e.originalName,
			label: $_texts.file,
			group: "d",
			readonly: !0
		}, {
			type: "text",
			name: "spotifyID",
			value: e.spotify_ID,
			label: $_texts.spotify_id,
			group: "d",
			readonly: !$_config.spotify_upload_e
		}, {
			type: "radio",
			name: "price",
			label: $_texts.price,
			group: "e",
			value: e.price,
			values: $__prices,
			readonly: !$_config.can_sell,
			disabled: !$_config.can_sell
		}],
		groups: {
			a: $_texts.detail,
			b: $_texts.lyrics,
			d: $_texts.sources,
			e: $_texts.price
		},
		buttons: [
			["btn-primary", $_texts.save, "updateUploadingTrackData()"]
		]
	})
}

function createAlbumEditModal(t) {
	var e = $__albums[t];
	createModal({
		title: $_texts.upload_edit_a_title,
		tip: e.title,
		class: "edit album type2",
		inputs: [{
			type: "hidden",
			name: "code",
			value: e.code,
			group: "a"
		}, {
			type: "hidden",
			name: "uploadID",
			value: $__upload_id,
			group: "a"
		}, {
			type: "text",
			name: "title",
			value: e.title,
			label: $_texts.title,
			group: "a"
		}, {
			type: "text",
			name: "artist_name",
			value: e.artist_name,
			label: $_texts.artist,
			group: "a"
		}, {
			type: "text",
			name: "time",
			value: e.time,
			label: $_texts.release,
			group: "a"
		}, {
			type: "select",
			name: "type",
			label: $_texts.album_type,
			value: e.type,
			values: [
				["single", "Single"],
				["studio", "Studio"],
				["compilation", "Compilation"],
				["mixtape", "Mixtape"]
			],
			attr: " onChange=\" $(document).find('.modal').find('.nartist_name').show(); if( $(this).val() == 'compilation' ) $(document).find('.modal').find('.nartist_name').hide(); \"",
			group: "a"
		}, {
			type: "select",
			name: "genre",
			value: e.genre,
			label: $_texts.genre,
			values: $__genres,
			group: "a"
		}, {
			type: "text",
			name: "spotifyID",
			value: e.spotify_ID,
			label: $_texts.spotify_id,
			readonly: !$_config.spotify_upload_e,
			group: "a"
		}, {
			type: "textarea",
			name: "comment",
			value: e.comment,
			label: $_texts.description,
			group: "a"
		}, {
			type: "radio",
			name: "price",
			label: $_texts.price,
			group: "e",
			value: e.price,
			values: $__prices,
			readonly: !$_config.can_sell,
			disabled: !$_config.can_sell
		}],
		groups: {
			a: $_texts.detail,
			e: $_texts.price
		},
		buttons: [
			["btn-primary", $_texts.save, "updateUploadingAlbumData()"]
		]
	})
}

function createModal(t) {
	if (void 0 !== t) {
		var e = void 0 === t.class ? "" : t.class,
			a = void 0 !== t.title && t.title,
			n = void 0 !== t.tip && t.tip,
			o = void 0 !== t.content && t.content,
			i = void 0 !== t.content_before && t.content_before,
			l = void 0 !== t.inputs && t.inputs,
			s = void 0 !== t.groups && t.groups,
			d = void 0 !== t.buttons && t.buttons,
			c = void 0 !== t.action && t.action,
			r = void 0 !== t.target && t.target,
			u = void 0 !== t.callback && t.callback,
			_ = void 0 !== t.callback_param && t.callback_param;
		$("body").addClass("active_modal");
		var p = [],
			m = "";
		if (m = (m = m + "<div class='hover close_modal_handle " + e + "'></div>") + "<div class='modal " + e + "'><form class='be_cli_form' data-hasFile='true' data-target='" + r + "' data-callback='" + u + "' data-callback_param='" + _ + "' method='post' data-action='" + c + "' enctype='multipart/form-data'>", a && (m = m + "<div class='title'>" + a + "<span class='close_modal_span close_modal_handle'>X</span></div>"), n && (m = m + "<div class='tip'>" + n + "</div>"), i && (m = m + "<div class='content before'>" + i + "</div>"), l) {
			var f = null;
			if (s) {
				for (var h in m += "<div class='groups'><div class='btn-group'>", s) {
					f = null === f ? h : f;
					var g = s[h];
					m = m + "<button data-GID='" + h + "' type='button' class='btn btn-secondary" + (f == h ? " active" : "") + "' style='width:" + Math.floor(100 / Object.keys(s).length) + "%'>" + g + "</button>"
				}
				m += "</div></div>"
			}
			m += "<div class='inputs'>";
			for (var v = 0; v < l.length; v++) {
				var b = l[v];
				if (b.type && b.name) {
					if (b.value = b.value ? b.value : "", b.full_attr = "id='" + b.name + "' name='" + b.name + "' class='form-control'" + (b.attr ? " " + b.attr : "") + (b.readonly ? " readonly='readonly'" : "") + (b.disabled ? " disabled='disabled'" : ""), "hidden" != b.type) {
						if (m = (m = m + "<div class='input t" + b.type + " n" + b.name + " g" + (void 0 === b.group ? "A" : b.group) + "' " + (void 0 === b.group || b.group == f ? "" : " style='display:none' ") + ">") + "<label>" + b.label + "</label>", "text" == b.type) m = m + "<input type='text' value='" + b.value + "' " + b.full_attr + (b.placeholder ? " placeholder='" + b.placeholder + "'" : "") + ">";
						else if ("textarea" == b.type) m = m + "<textarea " + b.full_attr + ">" + b.value + "</textarea>";
						else if ("select" != b.type && "select_multi" != b.type || void 0 === b.values || !b.values.length)
							if ("radio" == b.type && void 0 !== b.values && b.values.length) {
								m += "<div class='radio_wrappers'>";
								for (y = 0; y < b.values.length; y++) {
									"string" != typeof(k = b.values[y]) && "number" != typeof k || (k = [k, k]), m = m + "<div class='radio_wrapper'><input " + b.full_attr + " type='radio' value='" + k[0] + "'" + (b.value == k[0] ? " checked='checked'" : "") + ">" + k[1] + "<span class='checkmark'></span></div>"
								}
								m += "</div>", p.push(["#" + b.name, "change"])
							} else "file" == b.type && (m = (m = m + "<div class='form-control' style='opacity:0.4' onClick='$(\"#" + b.name + "\").click()'>" + $_texts.click_to_select + "</div>") + "<input style='display:none' type='file' " + b.full_attr + ">");
						else {
							if ("select_multi" == b.type) {
								b.full_attr = b.full_attr + " multiple='true' data-multi='true' ";
								b.value && b.value.split(",")
							}
							m = m + "<select " + b.full_attr + ">";
							for (var y = 0; y < b.values.length; y++) {
								var k;
								if (void 0 !== (k = b.values[y])) {
									var w = (b.type, b.value == k[0] ? " selected='selected'" : "");
									m = m + "<option value='" + k[0] + "'" + w + ">" + k[1] + "</option>"
								}
							}
							m += "</select>", p.push(["#" + b.name, "change"])
						}
						b.tip && (m = m + "<div class='itip'>" + b.tip + "</div>"), m += "</div>"
					} else m = m + "<input type='hidden' value='" + b.value + "' " + b.full_attr + ">"
				}
			}
			m += "</div>"
		}
		if (o && (m = m + "<div class='content after'>" + o + "</div>"), m += "<div class='response'></div>", d) {
			m = (m += "<div class='buttons'>") + "<div class='button'><a class='btn btn-secondary close_modal_handle'>" + $_texts.cancel + "</a></div>";
			for (v = 0; v < d.length; v++) m = m + "<div class='button'><a class='btn " + d[v][0] + "' onClick='" + d[v][2] + "'>" + d[v][1] + "</a></div>";
			m += "</div>"
		}
		if (m += "</form></div>", $("body").append(m), p)
			for (v = 0; v < p.length; v++) {
				var x = p[v];
				$(x[0]).trigger(x[1])
			}
		"undefined" != typeof pager && pager.bind(), c && be_cli_forms_hook(), $(document).trigger("new_modal")
	} else console.log("modal arguemts are missing")
}

function closeModal() {
	$(".hover").remove(), $(".modal").remove(), $("body").removeClass("active_modal")
}

function getModal(t, e) {
	if (!0 === t) {
		var a = $(document).find(".modal").find("form").serializeArray(),
			n = {};
		return $.map(a, function(t, a) {
			!0 === e && (t.value = escapeHtml(t.value)), "string" != typeof n[t.name] ? n[t.name] = t.value : n[t.name] = n[t.name] + "," + t.value
		}), n
	}
	return $(document).find(".modal").find("form").serialize()
}

function escapeHtml(t) {
	if ("string" != typeof t) return t;
	var e = {
		"&": "&amp;",
		"<": "&lt;",
		">": "&gt;",
		'"': "&quot;",
		"'": "&#39;",
		"/": "&#x2F;",
		"`": "&#x60;",
		"=": "&#x3D;"
	};
	return t.replace(/[&<>"']/g, function(t) {
		return e[t]
	})
}

function createNoAccessModal() {
	$("body").addClass("no_access"), closeModal(), $("body").append('<div class="hover no_access close_modal_handle"></div><div class="modal no_access"><div class="icon"><span class="mdi mdi-shield-key"></span></div><div class="title">' + $_texts.members_only + '<span class="close_modal_span close_modal_handle">X</span></div><div class="text">' + $_texts.members_only_tip + '</div><div class="buttons"><a href="' + $_home + 'user_signup" class="btn btn-secondary btn-sm">' + $_texts.signup + '</a><a href="' + $_home + 'user_login" class="btn btn-light btn-sm">' + $_texts.login + "</a></div></div>"), pager.bind()
}

function createNoAccessMediaModal() {
	$("body").addClass("no_access"), closeModal(), $("body").append('<div class="hover no_access close_modal_handle"></div><div class="modal no_access"><div class="icon"><span class="mdi mdi-shield-key"></span></div><div class="title">' + $_texts.not_purchased + '<span class="close_modal_span close_modal_handle">X</span></div><div class="text">' + $_texts.purchase_to_hear + '</div><div class="buttons"><a class="close_modal_handle btn btn-secondary btn-sm">' + $_texts.purchase + '</a><a class="add_fund_modal_handle btn btn-light btn-sm">' + $_texts.add_funds + "</a></div></div>"), pager.bind()
}

function createPurchaseModal(t) {
	if ($_user_id) {
		var e = t.title,
			a = (t.tip, t.item_type),
			n = t.item_hook,
			o = t.item_name,
			i = t.item_price,
			l = t.fund,
			s = $_texts.currency;
		createModal({
			class: "type2 purchase",
			content_before: '<div class="icon"><span class="mdi mdi-cart"></span></div><div class="title">' + e + '</div><div class="detail"><div class="item_name"><i>' + $_texts.item_name + ":</i><b>" + o + '</b></div><div class="item_price"><i>' + $_texts.item_price + ":</i><b>" + i + s + '</b></div><div class="fund"><i>' + $_texts.account_funt + ":</i><b>" + l + s + '</b></div></div><div class="buttons"><a class="btn btn-secondary btn-sm pp_handle" data-type="' + a + '" data-hook="' + n + '">' + $_texts.confirm + '</a><a class="add_fund_modal_handle btn btn-light btn-sm">' + $_texts.add_funds + '</a></div><div class="result"></div>'
		})
	} else createNoAccessModal()
}

function proceedPurchase(t) {
	var e = t.type,
		a = t.hook;
	$(document).find(".modal").addClass("has_result"), be_cli({
		action: "user_purchase",
		data: {
			type: e,
			hook: a
		},
		domTarget: ".modal .result",
		callBack: function(t, e) {
			t && (window.location = $_home + "user_setting?n=transaction_history")
		}
	})
}

function createShareModal(t) {
	var e = t.title,
		a = t.name,
		n = (t.tip, t.url),
		o = t.image;
	"track" != t.type ? createModal({
		class: "type2 share",
		content_before: '<div class="title">' + e + '</div><div class="share_content"><div class="image_wrapper"><img src="' + o + '"></div><div class="name">' + a + '</div><div class="url"><input type="text" value="' + n + '" class="form-control" readonly onClick="select()"></div><div class="soicons"><a class="soicon fb" href="https://www.facebook.com/sharer.php?u=' + n + '"><span class="icon"></a><a class="soicon tt" href="http://twitter.com/intent/tweet?text=' + a + "&url=" + n + '"><span class="icon"></a></div></div>'
	}) : createModal({
		class: "type2 share",
		content_before: '<div class="title">' + e + '</div><div class="groups"><div class="btn-group"><button data-gid="a" type="button" class="btn btn-secondary active" style="width:50%">Link</button><button data-gid="b" type="button" class="btn btn-secondary" style="width:50%">Embed</button></div></div><div class="share_content ga input"><div class="image_wrapper"><img src="' + o + '"></div><div class="name">' + a + '</div><div class="url"><input type="text" value="' + n + '" class="form-control" readonly onClick="select()"></div><div class="soicons"><a class="soicon fb" href="https://www.facebook.com/sharer.php?u=' + n + '"><span class="icon"></a><a class="soicon tt" href="http://twitter.com/intent/tweet?text=' + a + "&url=" + n + '"><span class="icon"></a></div></div><div class="embed_content gb input" style="display:none"><iframe src="' + n + '/embed" frameborder="0" width="100%" height="160px"></iframe><input type="text" value="&lt;iframe src=\'' + n + "/embed' frameborder='0' width='100%' height='160px'&gt;&lt;/iframe&gt;\" class=\"form-control\" readonly onClick=\"select()\"></div>"
	})
}
"undefined" != typeof Dropzone && (Dropzone.autoDiscover = !1), $(document).on("mouseover", ".wsnw", function(t) {
	var e = $(this).outerWidth(),
		a = $(this).find(".wsnwe").outerWidth(),
		n = a - e;
	e > a || $(this).hasClass("scrolling") || ($(this).addClass("scrolling"), $(this).find(".wsnwe").animate({
		right: "rtl" == $_dir ? "-" + n + "px" : 0,
		left: "ltr" == $_dir ? "-" + n + "px" : 0
	}, 10 * n > 300 ? 10 * n : 300))
}), $(document).on("mouseleave", ".wsnw", function(t) {
	$(document).find(".wsnw.scrolling").find(".wsnwe").stop(!0).animate({
		left: "ltr" == $_dir ? 0 : "auto",
		right: "rtl" == $_dir ? 0 : "auto"
	}, 500), $(document).find(".wsnw.scrolling").removeClass("scrolling")
}), $(document).ready(function() {
	starter()
}), $(document).on("change", "#receipt_file", function() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		hasFile: !0,
		domTarget: ".watermark",
		callBack: function(t, e) {
			t && closeModal(), pager.page_load($_home + "user_setting?n=transaction_history")
		}
	})
}), $(document).on("pageInlined_m", function() {
	$(".widget_slider").each(function(t, e) {
		var a = $(e).find(".slider")[0];
		(!a.scrollWidth || !a.offsetWidth || a.scrollWidth - a.offsetWidth < 50) && $(e).find(".arrows").remove()
	}), check_wsnw()
}), $(document).on("submit", "#post_comment", function(t) {
	return be_cli({
		action: "user_act_post_comment",
		data: {
			comment: $(document).find("#comment").val(),
			hash: $(this).attr("data-track-id"),
			m_hash: muse.song_data ? muse.song_data.hash : "",
			m_seeker: Math.round(muse.seek()),
			PID: $(document).find("#PID").val()
		},
		domTarget: ".watermark",
		callBack: function(t, e) {
			t ? pager.page_reload(!1) : alert(e)
		}
	}), t.preventDefault(), !1
}), $(document).on("submit", ".search_form_i", function(t) {
	return pager.page_load($_home + "search?qn=" + $(document).find("#qn").val()), $("body").removeClass("naved"), t.preventDefault(), !1
}), $(document).on("change", ".container.edit .file_handler", function(t) {
	$(this).parent("form").submit()
}), $("#scroller").on("scroll", function(t) {
	$("body").find(".button_more.active").removeClass("active"), !0 !== pos_active && (pos_active = !0, setTimeout(function() {
		style_navbar(), pos_active = !1
	}, 200))
}), $(document).on("click", function(t) {
	$(t.target).parents(".button_more").length || $(t.target).attr("class") && $(t.target).attr("class").includes("button_more") || $("body").find(".button_more").removeClass("active"), $(t.target).parents(".button_more").length && !$(t.target).parents(".dropdown-menu").length && ($($(t.target).parents(".button_more")[0]).attr("class").includes("active") && Date.now() - button_opened > 50) && $("body").find(".button_more").removeClass("active"), $(t.target).attr("class") && $(t.target).attr("class").includes("button_more") && !$(t.target).parents(".dropdown-menu").length && ($($(t.target)).attr("class").includes("active") && Date.now() - button_opened > 50) && $("body").find(".button_more").removeClass("active"), !$("body").hasClass("search_naved") || "qn" == $(t.target).attr("id") || $(t.target).hasClass("search_handler_btn") || $(t.target).parents(".search_handler_btn").length || $("body").removeClass("search_naved")
}), $(document).on("click", ".button_more", function(t) {
	if ((!$(t.target).parents(".button_more").length || $(t.target).parents(".dropdown-menu").length || !$($(t.target).parents(".button_more")[0]).attr("class").includes("active")) && (!$(t.target).attr("class") || !$(t.target).attr("class").includes("button_more") || $(t.target).parents(".dropdown-menu").length || !$($(t.target)).attr("class").includes("active"))) {
		var e = $(t.target).parents(".button_more").attr("data-type"),
			a = $(t.target).parents(".button_more").attr("data-hash");
		e && a && !$(this).find("ul").length && ($(this).append('<ul class="dropdown-menu all_buttons buttons buttons_' + a + ' "><li class="loading">' + $_texts.loading + "</li></ul>"), be_cli({
			action: "special_buttons",
			data: {
				type: e,
				hash: a
			},
			callBack_param: $(this),
			callBack: function(t, e, a) {
				t ? (a.find("ul").html(e), position_menu(a)) : a.find(".loading").text(e)
			}
		})), $("body").find(".button_more").removeClass("active"), $(this).addClass("active"), position_menu(this, $(this).attr("data-target")), button_opened = Date.now()
	}
}), $(document).on("click", ".naved #nav .menu_wrapper", function(t) {
	$("body").removeClass("naved")
}), $(document).on("click", ".widget_slider .arrows .arrow", function(t) {
	if ($(this).parents(".widget_slider")[0]) {
		for (var e = $(this).attr("class").includes("next") ? "right" : "left", a = $($(this).parents(".widget_slider")[0]), n = a.find(".slider")[0], o = n.scrollWidth, i = n.offsetWidth, l = $(n).find(".slider_item").outerWidth(!0), s = n.scrollLeft, d = Math.floor(i / l) > 1 ? Math.floor(i / l) : 1, c = ("ltr" == $_dir ? 1 : -1) * ("right" == e ? 1 : -1) * (d * l), r = s + c, u = o - i, _ = 9999, p = [], m = 0; m <= u; m += l) p.push(m);
		p.push(u), p.forEach(function(t) {
			var e = Math.abs(r - t);
			Math.abs(_ - r) > e && (_ = t)
		}), i + s == o && c > 0 && (_ = 0), 0 == s && c < 0 && (_ = u), a.find(".arrow.prev").css("opacity", 1), $(n).stop().animate({
			scrollLeft: _ + "px"
		}, 800)
	}
}), $(document).on("click", "#add_funds", function() {
	add_fund_modal()
}), $(document).on("click", ".button.menu_handle", function() {
	$("body").hasClass("naved") ? close_sidebar() : open_sidebar()
}), $(document).on("click", ".search_handle", function() {
	$(window).width() > 540 ? $(".button.search").hasClass("opened") ? $("body").find(".button.search form").submit() : $(".button.search").addClass("opened") : $("body").hasClass("search_open") ? $("body").find(".button.search form").submit() : open_search()
}), $(document).on("click", ".languages_handle li", function() {
	var t = $(this).attr("data-lang-code");
	window.location = $_home + "?lang=" + t
}), $(document).on("click", ".cpm_handler", function() {
	create_playlist_modal()
}), $(document).on("click", ".file_placeholder", function() {
	var t = $(this).attr("data-target");
	$(document).find(t).click()
}), $(document).on("click", ".upload_cover_handle", function() {
	$(this).parent(".cover_wrapper").find("input[name=file]").click()
}), $(document).on("click", ".upload_finalize_handle", function() {
	finalize_edit()
}), $(document).on("click", ".follow_user_handle", function() {
	follow_target($(this).attr("data-target"))
}), $(document).on("click", ".end_session_handle", function() {
	end_session($(this).attr("data-hook"))
}), $(document).on("click", ".delete_comment_handle", function() {
	delete_comment($(this).attr("data-ID"))
}), $(document).on("click", ".reply_comment_handle", function() {
	var t = $(this).attr("data-ID"),
		e = $(this).attr("data-target");
	$(document).find("#PID").val(t), $(document).find("#comment").val("@" + e + " "), $("#scroller").animate({
		scrollTop: $(".add_comment").offset().top + $("#scroller").scrollTop() - $(".add_comment").height() - 50
	}, 700), $(document).find("#comment").focus()
}), $(document).on("click", ".like_comment_handle", function() {
	like_comment($(this).attr("data-ID"))
}), $(document).on("click", ".remove_playlist_handle", function() {
	remove_playlist_modal($(this).attr("data-hook"))
}), $(document).on("click", ".caem_handle", function() {
	createAlbumEditModal($(this).attr("data-hook"))
}), $(document).on("click", ".ctem_handle", function() {
	createTrackEditModal($(this).attr("data-hook"))
}), $(document).on("click", ".share_handle", function() {
	var t = $(this).attr("data-title"),
		e = $(this).attr("data-image"),
		a = $(this).attr("data-url"),
		n = $(this).attr("data-name");
	createShareModal({
		title: t,
		type: $(this).attr("data-type"),
		image: e,
		url: a,
		name: n
	})
}), $(document).on("click", ".report_handle", function() {
	createModal({
		title: "Report Track",
		class: "report type2",
		inputs: [{
			type: "textarea",
			name: "reason",
			label: "Reason"
		}, {
			type: "hidden",
			name: "hash",
			value: $(this).attr("data-hash")
		}],
		buttons: [
			["btn-primary", $_texts.confirm_action, '$(".modal form").submit()']
		],
		action: "user_act_report_track",
		target: ".watermark",
		callback: "refresh"
	})
}), $(document).on("click", ".rti_handle", function() {
	redirect_to_item($(this).attr("data-source-type"), $(this).attr("data-target-type"), $(this).attr("data-target-hook"))
}), $(document).on("click", "._c_w.bank", function() {
	add_fund_bank()
}), $(document).on("click", "._c_w.online_gateway", function() {
	add_fund_online_gateway($(this).attr("data-name"))
}), $(document).on("click", ".m_rp_a", function() {
	remove_playlist($(this).attr("data-hook"))
}), $(document).on("click", ".m_cp_a", function() {
	create_playlist()
}), $(document).on("click", ".tul_handle", function() {
	toggleUploadList()
}), $(document).on("click", ".close_modal_handle", function() {
	closeModal()
}), $(document).on("click", ".add_fund_modal_handle", function() {
	add_fund_modal()
}), $(document).on("click", ".modal .groups button", function() {
	var t = $(this).attr("data-GID");
	$(document).find(".modal").find(".input").hide(), $(document).find(".modal").find(".groups .active").removeClass("active"), $(this).addClass("active"), $(document).find(".modal").find(".input.g" + t).show(), $(document).find(".modal").find(".input.g" + t + " .form-control").trigger("change"), $(document).trigger("group_change", [t])
}), $(document).on("click", ".pp_handle", function() {
	proceedPurchase({
		type: $(this).attr("data-type"),
		hook: $(this).attr("data-hook")
	})
}), $(document).on("click", ".purchase_handle", function() {
	var t = $(this).attr("data-title"),
		e = $(this).attr("data-tip"),
		a = $(this).attr("data-fund"),
		n = $(this).attr("data-item-type"),
		o = $(this).attr("data-item-title");
	createPurchaseModal({
		title: t,
		tip: e,
		fund: a,
		item_type: n,
		item_hook: $(this).attr("data-item-hook") ? $(this).attr("data-item-hook") : "",
		item_name: o,
		item_price: $(this).attr("data-item-price")
	})
}), $(document).on("click", ".artist_subsribe_handle", function() {
	var t = $(this).attr("data-code");
	be_cli({
		action: "user_act_sub_artist",
		domTarget: ".watermark",
		data: {
			code: t
		},
		callBack: function(t, e) {
			pager.page_reload()
		}
	})
}), $(document).on("click", ".playlist_subscribe_handle", function() {
	var t = $(this).attr("data-hook");
	be_cli({
		action: "user_act_sub_playlist",
		domTarget: ".watermark",
		data: {
			hook: t
		},
		callBack: function(t, e) {
			pager.page_reload()
		}
	})
}), $(document).on("click", ".edit_playlist_handle", function() {
	var t = $(this).attr("data-hook"),
		e = $(this).attr("data-name");
	createModal({
		title: "Edit Playlist",
		tip: e,
		class: "edit album type2",
		inputs: [{
			type: "text",
			name: "name",
			value: e,
			label: "Name",
			group: "a"
		}, {
			type: "hidden",
			name: "hook",
			value: t,
			group: "a"
		}, {
			type: "file",
			name: "cover",
			label: "Cover Image",
			group: "a"
		}, {
			type: "textarea",
			name: "collabs",
			label: "Collabs",
			group: "b",
			value: $(this).attr("data-collabs"),
			tip: "You can allow other users to add or remove tracks from this playlist. Enter username(s) comma separated. Example: admin,user1,user2"
		}],
		groups: {
			a: $_texts.detail,
			b: "Collabs"
		},
		buttons: [
			["btn-primary", $_texts.save, '$(".modal form").submit()']
		],
		action: "user_act_edit_playlist",
		target: ".watermark",
		callback: "refresh"
	})
}), $(document).on("click", ".campaign_handler", function() {
	$.getScript($_home + "themes/__default/assets/third/chosen_v1.8.7/chosen.jquery.min.js").done(function(t, e) {
		$("<link/>", {
			rel: "stylesheet",
			type: "text/css",
			href: $_home + "themes/__default/assets/third/chosen_v1.8.7/chosen.min.css"
		}).appendTo("head"), createModal({
			title: "New Campaign",
			class: "new_campaign type2",
			inputs: [{
				type: "text",
				name: "name",
				label: "Name",
				tip: "Campaign Name",
				group: "a"
			}, {
				type: "text",
				name: "fund",
				label: "Total Fund",
				tip: "Will be taken from your account fund",
				group: "a"
			}, {
				type: "text",
				name: "limit",
				label: "Limit",
				tip: "Maximum fund per day",
				group: "a"
			}, {
				type: "text",
				name: "url",
				label: "Url",
				tip: "Destination URL Address",
				group: "pl_b"
			}, {
				type: "select",
				name: "ad_type",
				label: "Ad Type",
				tip: "Choose ad type",
				group: "pl_b",
				values: [
					["banner_v", "Banner - Pay per view"],
					["banner_c", "Banner - Pay per click"],
					["audio_v", "Audio - Pay per impression"]
				]
			}, {
				type: "select_multi",
				values: $placements,
				name: "placements_b",
				label: "Placement",
				group: "pl_b",
				tip: "Where should we display this ad?"
			}, {
				type: "hidden",
				name: "placements",
				group: "pl_b"
			}, {
				type: "file",
				name: "audio",
				label: "Audio File",
				group: "pl_b",
				tip: "Maximum 30 seconds. Must be high quality in low size"
			}, {
				type: "file",
				name: "audio_banner",
				label: "Banner Image",
				group: "pl_b",
				tip: "Small , click-able banner image that will be displayed when audio is playing"
			}, {
				type: "file",
				name: "banner",
				label: "Banner Image",
				group: "b",
				tip: "Banner image. Might hide some part in order to fit into size"
			}],
			groups: {
				a: "Setting",
				pl_b: "Content"
			},
			buttons: [
				["btn-primary", $_texts.save, '$(".modal form").submit()']
			],
			action: "user_ads_create",
			target: ".watermark",
			callback: "refresh"
		}), $(document).find("#ad_type").trigger("change")
	})
}), $(document).on("change", "#ad_type", function() {
	$(document).find(".groups button[data-gid=a]").hasClass("active") || ("audio_v" != $(this).val() ? ($(document).find(".nbanner").show(), $(document).find(".nplacements_b").show(), $(document).find(".naudio_banner").hide(), $(document).find(".naudio").hide()) : ($(document).find(".nbanner").hide(), $(document).find(".nplacements_b").hide(), $(document).find(".naudio_banner").show(), $(document).find(".naudio").show()))
}), $(document).on("group_change", function(t, e) {
	"pl_b" == e && $(document).find("#placements_b").chosen({
		disable_search_threshold: 1,
		max_selected_options: 10
	}).change(function() {
		var t = getModal(!0).placements_b;
		$(document).find("#placements").val(t), console.log(t)
	})
}), $(document).on("click", ".playlist_like_handle", function() {
	var t = $(this).attr("data-hook");
	be_cli({
		action: "user_act_like_playlist",
		domTarget: ".watermark",
		data: {
			hook: t
		},
		callBack: function(t, e) {
			pager.page_reload()
		}
	})
}), $(document).on("click", ".album_like_handle", function() {
	var t = $(this).attr("data-hook");
	be_cli({
		action: "user_act_like_album",
		domTarget: ".watermark",
		data: {
			hook: t
		},
		callBack: function(t, e) {
			pager.page_reload()
		}
	})
}), $(document).on("click", ".nots_btn:not(.active)", function(t) {
	$(this).find("ul").html("<li class='loading'>" + $_texts.loading + "</li>"), get_nots(!0, 1, $(this).find("ul"))
}), $(document).on("click", ".pl_wrapper", function(t) {
	var e = $(this).attr("data-ad-id");
	be_cli({
		action: "get_ad_link",
		data: {
			ad_id: e
		},
		callBack: function(t, e) {
			t && window.open(e, "_blank")
		}
	})
}), $(document).on("click", ".apl_wrapper", function(t) {
	var e = $(this).attr("data-ad-id");
	be_cli({
		action: "get_ad_link",
		data: {
			ad_id: e
		},
		callBack: function(t, e) {
			t && window.location.replace(e)
		}
	})
}), $(document).on("click", ".save_feed_handler", function() {
	submitFeedSetting()
});