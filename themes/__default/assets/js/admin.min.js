"use strict";

function suggest(e, t) {
	be_cli({
		action: "admin_get_suggestions",
		data: {
			type: e,
			q: $(t).val()
		},
		background: !1,
		callBack: function(e, a) {
			e ? (clear_suggestion($(t).attr("ID")), make_suggestion($(t).attr("ID"), $(t), JSON.parse(a))) : clear_suggestion($(t).attr("ID"))
		}
	})
}

function clear_suggestion(e) {
	$.each($(document).find(".suggestions"), function(t, a) {
		var i = $(a);
		e ? i.attr("ID") != e && i.remove() : setTimeout(function() {
			i.remove()
		}, 200)
	})
}

function make_suggestion(e, t, a) {
	var i = "",
		n = "";
	$.each(a, function(t, a) {
		n += "<div class='suggestion ash' data-value='" + t + "' data-target='" + e + "'>" + a + "</div>"
	}), $(document).find("#target_" + e).length > 0 ? $(document).find("#target_" + e).html(n) : (i += "<div class='suggestions' id='target_" + e + "'>", i += n, i += "</div>", $("body").append(i), $(".suggestions").css("width", t.outerWidth() + "px").css("top", t.offset().top - $(window).scrollTop() + t.outerHeight() + "px").css("left", t.offset().left + "px"))
}

function choose_suggestion(e, t) {
	0 != t && $("#" + e).val(t), clear_suggestion(!1)
}

function delete_albums_modal(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], createModal({
		title: "Confirm Action",
		inputs: [{
			label: "New album ID",
			name: "album",
			type: "text",
			value: "0",
			tip: "Where should we move tracks belonging to this album? Enter the ID of new album. Enter 0 if you wish to delete tracks. You can search by album title",
			attr: ' onInput="suggest(\'album_id\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" '
		}],
		buttons: [
			["btn-primary", "Confirm", 'delete_albums( getModal(true)["album"] )']
		]
	})) : alert("Select something first")
}

function delete_albums(e) {
	be_cli({
		action: "admin_delete_albums",
		data: {
			albums: ids.join(","),
			new_album: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	}), closeModal()
}

function edit_album_modal(e) {
	var t = $__albums[e];
	createModal({
		title: "Edit Album",
		inputs: [{
			name: "action",
			type: "hidden",
			value: "admin_edit_album"
		}, {
			name: "ID",
			type: "hidden",
			value: t.ID
		}, {
			label: "Title",
			name: "title",
			type: "text",
			value: t.title
		}, {
			type: "select",
			name: "type",
			label: "Type",
			value: t.type,
			values: [
				["single", "Single"],
				["studio", "Studio"],
				["compilation", "Compilation"],
				["mixtape", "Mixtape"]
			],
			attr: " onChange=\" $(document).find('.modal').find('.nartist_name').show(); if( $(this).val() == 'compilation' ) $(document).find('.modal').find('.nartist_name').hide(); \""
		}, {
			label: "Cover",
			name: "cover",
			type: "file",
			tip: "Select a new image if you wish to change this album's cover"
		}, {
			label: "Description",
			name: "comment",
			type: "textarea",
			value: t.comment ? t.comment.replace(/<BR>/g, "\r\n") : ""
		}, {
			label: "User ID",
			name: "user_id",
			type: "text",
			value: t.user_id,
			attr: ' onInput="suggest(\'user\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" ',
			tip: "Enter user-ID or search by username"
		}, {
			type: "select",
			name: "genre",
			value: t.genre.code,
			label: "Genre",
			values: $__genres
		}, {
			label: "Artist Name",
			name: "artist_name",
			type: "text",
			value: t.artist_name,
			attr: ' onInput="suggest(\'artist_name\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" '
		}, {
			label: "Spotify ID",
			name: "spotify_id",
			type: "text",
			value: t.spotify_id
		}, {
			label: "Release Time",
			name: "time_release",
			type: "text",
			value: t.time_release
		}, {
			label: "Price",
			name: "price",
			type: "text",
			value: t.price
		}],
		buttons: [
			["btn-primary", "Confirm", "edit_album()"]
		]
	})
}

function edit_album() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		domTarget: ".watermark",
		hasFile: !0,
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function delete_artists_modal(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], createModal({
		title: "Confirm Action",
		inputs: [{
			label: "New artist ID",
			name: "artist",
			type: "text",
			value: "0",
			tip: "Where should we move tracks/albums belonging to this artist? Enter the ID of new artist. Enter 0 if you wish to delete tracks. You can search by artist name",
			attr: ' onInput="suggest(\'artist_id\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" '
		}],
		buttons: [
			["btn-primary", "Confirm", 'delete_artists( getModal(true)["artist"] )']
		]
	})) : alert("Select something first")
}

function delete_artists(e) {
	be_cli({
		action: "admin_delete_artists",
		data: {
			artists: ids.join(","),
			new_artist: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	}), closeModal()
}

function edit_artist_modal(e) {
	var t = $__artists[e];
	createModal({
		title: "Edit artist",
		inputs: [{
			name: "action",
			type: "hidden",
			value: "admin_edit_artist"
		}, {
			name: "ID",
			type: "hidden",
			value: t.ID
		}, {
			label: "Name",
			name: "name",
			type: "text",
			value: t.name
		}, {
			label: "Image",
			name: "image",
			type: "file",
			tip: "Select a new image if you wish to change this artist image"
		}, {
			label: "Spotify ID",
			name: "spotify_id",
			type: "text",
			value: t.spotify_id
		}],
		buttons: [
			["btn-primary", "Confirm", "edit_artist()"]
		]
	})
}

function edit_artist() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		domTarget: ".watermark",
		hasFile: !0,
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function delete_tracks_modal(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], createModal({
		title: "Confirm Action",
		buttons: [
			["btn-primary", "Confirm", "delete_tracks()"]
		]
	})) : alert("Select something first")
}

function delete_tracks() {
	be_cli({
		action: "admin_delete_tracks",
		data: {
			tracks: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	}), closeModal()
}

function new_track_modal() {
	edit_track_modal("new")
}

function edit_track_modal(e) {
	var t = null;
	t = "new" != e ? $__tracks[e] : {
		text_data: {}
	}, createModal({
		title: ("new" == e ? "New" : "Edit") + " Track",
		inputs: [{
			name: "action",
			type: "hidden",
			value: "new" == e ? "admin_new_track" : "admin_edit_track"
		}, {
			name: "ID",
			type: "hidden",
			value: t.ID
		}, {
			label: "Title",
			name: "title",
			type: "text",
			value: t.title
		}, {
			label: "Cover",
			name: "cover",
			type: "file",
			tip: "Select a new image if you wish to change this track's cover"
		}, {
			label: "User ID",
			name: "user_id",
			type: "text",
			value: t.user_id,
			attr: ' onInput="suggest(\'user\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" ',
			tip: "Enter user-ID or search by username"
		}, {
			type: "select",
			name: "genre",
			value: t.genre_code,
			label: "Genre",
			values: $__genres
		}, {
			label: "Artist Name",
			name: "artist_name",
			type: "text",
			value: t.artist_name,
			attr: ' onInput="suggest(\'artist_name\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" '
		}, {
			label: "Featured Artists",
			name: "artists_featured",
			type: "text",
			value: t.artists_featured ? t.artists_featured.join(";") : ""
		}, {
			label: "Album Type",
			name: "album_type",
			type: "new" == e ? "select" : "hidden",
			value: t.album_type,
			values: [
				["single", "Single"],
				["studio", "Studio"],
				["compilation", "Compilation"],
				["mixtape", "Mixtape"]
			],
			attr: " onChange=\" $(document).find('.modal').find('.nartist_name').show(); if( $(this).val() == 'compilation' ) $(document).find('.modal').find('.nartist_name').hide(); \""
		}, {
			type: "new" == e ? "select" : "hidden",
			name: "album_genre",
			value: t.album_genre,
			label: "Album Genre",
			values: $__genres
		}, {
			label: "Album Artist Name",
			name: "album_artist_name",
			type: "text",
			value: t.album_artist_name,
			attr: ' onInput="suggest(\'artist_name\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" '
		}, {
			label: "Album Title",
			name: "album_title",
			type: "text",
			value: t.album_title,
			attr: ' onInput="suggest(\'album_title\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" '
		}, {
			label: "Album Order",
			name: "album_order",
			type: "text",
			value: t.album_order
		}, {
			label: "Spotify ID",
			name: "spotify_id",
			type: "text",
			value: t.spotify_id
		}, {
			label: "SoundCloud URL",
			name: "soundcloud_url",
			type: "hidden",
			value: t.soundcloud_url
		}, {
			label: "Youtube ID",
			name: "youtube_id",
			type: "hidden",
			value: t.youtube_id
		}, {
			label: "iTunes URL",
			name: "itunes_url",
			type: "hidden",
			value: t.itunes_url
		}, {
			label: "Bandcamp full address",
			name: "bandcamp_id",
			type: "hidden",
			value: t.bandcamp_id
		}, {
			label: "Site Link",
			name: "site_link",
			type: "hidden",
			value: t.sitelink
		}, {
			label: "Price",
			name: "price",
			type: "text",
			value: t.price
		}, {
			label: "Duration",
			name: "duration",
			type: "text",
			value: t.duration,
			tip: "Duration in seconds"
		}, {
			label: "Release Time",
			name: "time_release",
			type: "text",
			value: t.time_release
		}, {
			label: "comment",
			name: "text_comment",
			type: "textarea",
			value: t.text_data.comment
		}, {
			label: "Lyrics",
			name: "text_lyrics",
			type: "textarea",
			value: t.text_data.lyrics
		}, {
			label: "Download Link",
			name: "download_link",
			type: "hidden",
			value: t.dl_link,
			tip: "Should this track download link redirect user to a customized url? Enter that url"
		}],
		buttons: [
			["btn-primary", "Confirm", "edit_track()"]
		]
	})
}

function edit_track() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		domTarget: ".watermark",
		hasFile: !0,
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function delete_genres_modal(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], createModal({
		title: "Confirm Action",
		inputs: [{
			label: "Genre",
			name: "genre",
			type: "text",
			value: "1",
			attr: ' onInput="suggest(\'genre_id\',this)" autocomplete="off" onfocusout="clear_suggestion(false)" ',
			tip: 'Where should we move tracks/albums belonging to this genre? Enter the ID of new genre. Enter 1 for "No-Genre"'
		}],
		buttons: [
			["btn-primary", "Confirm", 'delete_genres( getModal(true)["genre"] )']
		]
	})) : alert("Select something first")
}

function delete_genres(e) {
	be_cli({
		action: "admin_remove_genres",
		data: {
			genres: ids.join(","),
			new_genre: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	}), closeModal()
}

function new_genre_modal() {
	createModal({
		title: "Create new genre",
		inputs: [{
			label: "Name",
			name: "name",
			type: "text",
			tip: "Name of new genre"
		}],
		buttons: [
			["btn-primary", "Confirm", 'new_genre( getModal(true)["name"] )']
		]
	})
}

function new_genre(e) {
	be_cli({
		action: "admin_new_genre",
		data: {
			name: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function edit_genre_modal(e) {
	createModal({
		title: "Edit " + e.name,
		inputs: [{
			name: "ID",
			type: "hidden",
			value: e.ID
		}, {
			name: "action",
			type: "hidden",
			value: "admin_edit_genre"
		}, {
			label: "Name",
			name: "name",
			type: "text",
			tip: "Name of genre",
			value: e.name
		}, {
			label: "Image",
			name: "file",
			type: "file",
			tip: "New background image of genre. Image should have a 1.5 ratio for example . 700*350"
		}],
		buttons: [
			["btn-primary", "Confirm", "edit_genre()"]
		]
	})
}

function edit_genre() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		domTarget: ".watermark",
		hasFile: !0,
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function recover_genre(e) {
	be_cli({
		action: "admin_recover_genre",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function truncate_genre(e) {
	be_cli({
		action: "admin_delete_genre",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function delete_sources(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], be_cli({
		action: "admin_delete_sources",
		data: {
			sources: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})) : alert("Select something first")
}

function delete_source_waves(e) {
	be_cli({
		action: "admin_delete_source_waves",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function new_source_modal(e) {
	createModal({
		title: "New Source",
		inputs: [{
			name: "action",
			type: "hidden",
			value: "admin_new_source"
		}, {
			label: "Track ID",
			name: "track_id",
			type: "text",
			attr: ' onInput="suggest(\'track_id\',this)" onfocusout="clear_suggestion(false)" autocomplete="off" ',
			tip: "Enter track-ID or search by title",
			value: e
		}, {
			label: "Type",
			name: "type",
			type: "select",
			values: [
				["youtube", "Youtube"],
				["local", "File"]
			]
		}, {
			label: "File",
			name: "file",
			type: "file",
			tip: "Select the file if you wish to add a file source"
		}, {
			label: "Youtube",
			name: "youtube",
			type: "text",
			tip: "Enter the yotube-ID if you wish to add a yotube source"
		}, {
			label: "Duration",
			name: "duration",
			type: "text"
		}],
		buttons: [
			["btn-primary", "Confirm", "new_source()"]
		]
	})
}

function new_source() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		domTarget: ".watermark",
		hasFile: !0,
		callBack: function(e, t) {}
	})
}

function delete_users_modal(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], createModal({
		title: "Confirm Action",
		inputs: [{
			label: "New user ID",
			name: "user",
			type: "text",
			value: "0",
			tip: "Where should we move tracks/albums belonging to this user? Enter the ID of new user. Enter 0 if you wish to delete tracks"
		}],
		buttons: [
			["btn-primary", "Confirm", 'delete_users( getModal(true)["user"] )']
		]
	})) : alert("Select something first")
}

function delete_users(e) {
	be_cli({
		action: "admin_delete_users",
		data: {
			users: ids.join(","),
			new_user: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	}), closeModal()
}

function connect_artist_modal(e) {
	createModal({
		title: "Connect User+Artist",
		inputs: [{
			label: "Artist ID",
			name: "artist_id",
			type: "text",
			value: "0",
			tip: "Enter Artist-ID of this user or search by username",
			attr: ' onInput="suggest(\'artist_id\',this)" autocomplete="off" onfocusout="clear_suggestion(false)" '
		}],
		buttons: [
			["btn-primary", "Confirm", "connect_artist( " + e + ', getModal(true)["artist_id"] )']
		]
	})
}

function connect_artist(e, t) {
	be_cli({
		action: "admin_user_connect",
		data: {
			user_id: e,
			artist_id: t
		},
		callBack: function(e, t) {
			e && window.location.reload()
		},
		domTarget: ".watermark"
	})
}

function disconnect_artist(e) {
	be_cli({
		action: "admin_user_disconnect",
		data: {
			artist_id: "",
			user_id: e
		},
		callBack: function(e, t) {
			e && window.location.reload()
		},
		domTarget: ".watermark"
	})
}

function edit_user_modal(e) {
	var t = $__users[e];
	createModal({
		title: "Edit user",
		inputs: [{
			name: "action",
			type: "hidden",
			value: "admin_edit_user"
		}, {
			name: "ID",
			type: "hidden",
			value: t.ID
		}, {
			label: "Group",
			name: "group",
			type: "select",
			value: t.GID,
			values: $__groups
		}, {
			label: "Username",
			name: "username",
			type: "text",
			value: t.username
		}, {
			label: "Name",
			name: "name",
			type: "text",
			value: t.name_raw
		}, {
			label: "Email",
			name: "email",
			type: "text",
			value: t.email
		}, {
			label: "New Password",
			name: "new_password",
			type: "text",
			tip: "Enter a new password for this user"
		}, {
			label: "Fund",
			name: "fund",
			type: "text",
			value: t.fund
		}, {
			label: "`Paid` Expiration Date",
			name: "time_paid_expire",
			type: "text",
			value: t.time_paid_expire,
			tip: "Full timestamp. Example: 2020/12/30 16:20:00"
		}, {
			label: "Avatar",
			name: "avatar",
			type: "file"
		}],
		buttons: [
			["btn-primary", "Confirm", "edit_user()"]
		]
	})
}

function edit_user() {
	be_cli({
		data: new FormData($(document).find(".modal").find("form")[0]),
		dataType: "html",
		domTarget: ".watermark",
		hasFile: !0,
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function verify_user(e) {
	be_cli({
		action: "admin_user_verify",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function accept_artist_request(e) {
	be_cli({
		action: "admin_accept_artist",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function reject_artist_request(e) {
	be_cli({
		action: "admin_reject_artist",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function delete_comments(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], be_cli({
		action: "admin_delete_comments",
		data: {
			comments: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})) : alert("Select something first")
}

function approve_comments(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], be_cli({
		action: "admin_approve_comments",
		data: {
			comments: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})) : alert("Select something first")
}

function _confirm_remove_user_group(e, t) {
	createModal({
		title: "Confirm",
		content: "Do you really want to remove <i><b>" + e + "</b></i> user group?<br>",
		buttons: [
			["btn-danger", "Confirm", 'remove_user_group("' + t + '")']
		]
	})
}

function remove_user_group(e) {
	be_cli({
		action: "admin_users_remove_group",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function add_new_user_group_modal() {
	createModal({
		title: "Add new user-group",
		tip: "Configure new user-group",
		inputs: [{
			type: "text",
			name: "name",
			label: "name"
		}],
		buttons: [
			["btn-primary", "Add", "add_new_user_group_action()"]
		]
	})
}

function add_new_user_group_action() {
	be_cli({
		action: "admin_users_new_group",
		data: {
			name: getModal(!0).name
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function approve_payments(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], be_cli({
		action: "admin_approve_payments",
		data: {
			payments: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})) : alert("Select something first")
}

function reject_payments(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], be_cli({
		action: "admin_reject_payments",
		data: {
			payments: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})) : alert("Select something first")
}

function approve_withdraw(e) {
	be_cli({
		action: "admin_artist_withdraw_done",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function reject_withdraw(e) {
	be_cli({
		action: "admin_artist_withdraw_remove",
		data: {
			ID: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function dismiss_reports(e) {
	("object" == typeof(e = null == e ? ids : e) ? e.length : e) ? (ids = "object" == typeof e ? e : [e], be_cli({
		action: "admin_dismiss_reports",
		data: {
			tracks: ids.join(",")
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	}), closeModal()) : alert("Select something first")
}

function edit_ad_modal(e) {
	var t = $__ads[e];
	createModal({
		title: "Edit advertisement",
		inputs: [{
			name: "ID",
			type: "hidden",
			value: t.ID
		}, {
			label: "Name",
			name: "name",
			type: "text",
			value: t.name
		}, {
			label: "URL",
			name: "url",
			type: "text",
			value: t.url
		}, {
			label: "Total funds",
			name: "fund_total",
			type: "text",
			value: t.fund_total
		}, {
			label: "Remaining funds",
			name: "fund_remain",
			type: "text",
			value: t.fund_remain ? t.fund_remain : "0"
		}, {
			label: "Spent funds",
			name: "fund_spent",
			type: "text",
			value: t.fund_spent ? t.fund_spent : "0"
		}, {
			label: "Funds daily limit",
			name: "fund_limit",
			type: "text",
			value: t.fund_limit
		}, {
			label: "Spent funds ( daily )",
			name: "fund_spent_day",
			type: "text",
			value: t.fund_spent_day ? t.fund_spent_day : "0"
		}, {
			label: "Placements",
			name: "placements",
			type: "select_multi",
			value: t.placements,
			values: $__placements
		}, {
			label: "Status",
			name: "active",
			type: "select",
			value: t.active,
			values: [
				["-1", "Removed"],
				["-2", "Rejected"],
				["0", "Pending"],
				["1", "Active"],
				["2", "Paused"]
			]
		}],
		buttons: [
			["btn-primary", "Confirm", "edit_ad()"]
		]
	})
}

function edit_ad() {
	be_cli({
		action: "admin_edit_ad",
		data: getModal(!0),
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function __edit_language(e, t, a) {
	createModal({
		title: "Edit a language text",
		inputs: [{
			type: "hidden",
			name: "hook",
			label: "hook",
			value: e
		}, {
			type: "textarea",
			name: "text",
			label: "Text",
			tip: '<div class="m10t">English equivalent:<br>' + escapeHtml(a) + "</div>",
			value: t
		}],
		buttons: [
			["btn-success", "Save", "__edit_language_action()"]
		]
	})
}

function __edit_language_action() {
	be_cli({
		action: "admin_edit_language",
		data: getModal(!0),
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function _confirm_remove_lang(e, t) {
	createModal({
		title: "Confirm",
		content: "Do you really want to remove <i><b>" + t + "</b></i> language?<br>The translations that you have made won't be deleted but this language will be inaccessible<br><br>",
		buttons: [
			["btn-danger", "Confirm", 'remove_lang("' + e + '")']
		]
	})
}

function remove_lang(e) {
	be_cli({
		action: "admin_remove_language",
		domTarget: ".watermark",
		data: {
			code: e
		},
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function __add_new_language_modal() {
	createModal({
		title: "Add new language",
		tip: "Configure new language",
		inputs: [{
			type: "text",
			name: "name",
			label: "name"
		}, {
			type: "text",
			name: "code",
			label: "code",
			tip: 'ISO 639-1 code of language. en for english, es for español and etc. You can find a list <a target="_blank" href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">Here</a>'
		}],
		buttons: [
			["btn-primary", "Add", "__add_new_language_action()"]
		]
	})
}

function __add_new_language_action() {
	be_cli({
		action: "admin_new_language",
		data: getModal(!0),
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function hook(e) {
	!0 === e && ($items = dom_to_json(), $("#builder").html(" "), buildItems()), $("#builder .item.child").draggable({
		revert: !0
	}), $("#builder .item.cover").droppable({
		drop: dropHandle
	}), $("#builder .item.before").droppable({
		drop: sortHandle
	}), $("#builder").disableSelection()
}

function dropHandle(e, t) {
	var a = e.target,
		i = t.draggable;
	$(i).attr("class").includes("cover") ? $(i).parent(".item.parent").remove() : $(i).remove(), $(a).parent(".item.parent").find(".items").append(buildItem($(i).data("page"), $(i).find(".text").text(), $(i).data("icon"))), hook(!0)
}

function sortHandle(e, t) {
	var a = e.target,
		i = t.draggable;
	if ($(a).attr("class").includes("cover")) {
		$("<div class='item parent p666 nochild'>" + buildItem($(i).data("page"), $(i).find(".text").text(), $(i).data("icon"), " cover child") + "<div class='items menus'></div></div>").insertBefore($(a).parent(".item.parent"));
		var n = $(i).parent(".item.parent").find(".items .item");
		if (n.length)
			for (var o = 0; o < n.length; o++) {
				var l = n[o];
				$(l).attr("class").includes("before") || $(buildItem(l.getAttribute("data-page"), $(l).find(".text").text(), l.getAttribute("data-icon"))).appendTo($(document).find(".item.parent.p666 .items"))
			}
	} else $(buildItem($(i).data("page"), $(i).find(".text").text(), $(i).data("icon"))).insertBefore($(a));
	$(i).attr("class").includes("cover") ? $(i).parent(".item.parent").remove() : $(i).remove(), hook(!0)
}

function buildItems() {
	for (var e = 0; e < $items.length; e++) {
		var t = $items[e];
		if ($("<div class='item parent p" + 3 * e + " nochild'>" + buildItem(t.page, t.title, t.icon, " cover child p" + (3 * e - 1)) + "<div class='items menus'></div></div>").appendTo("#builder"), void 0 !== t.items && t.items.length) {
			$(".item.parent.p" + 3 * e).removeClass("nochild").addClass("haschild");
			for (var a = 0; a < t.items.length; a++) {
				var i = t.items[a];
				$(buildItem(i.page, i.title, i.icon)).appendTo(".item.parent.p" + 3 * e + " .items")
			}
		}
	}
}

function buildItem(e, t, a, i) {
	return "<div class='" + (i ? i + " item face before" : "item face before") + "'></div><div class='" + (i ? i + " item face" : "item face child") + "' data-page='" + e + "' data-icon='" + a + "'><div class='text'>" + t + "</div><span class='edit mb_cem_handle' title='edit' ></span><span class='delete mb_di_handle' title='delete'></span></div>"
}

function dom_to_json() {
	for (var e = [], t = $("#builder .item.parent"), a = 0; a < t.length; a++) {
		var i = t[a],
			n = {
				title: $(i).find(".item.cover:not(.before) .text").text(),
				page: $(i).find(".item.cover:not(.before)").attr("data-page"),
				icon: $(i).find(".item.cover:not(.before)").attr("data-icon"),
				items: []
			},
			o = $(i).find(".items .item");
		if (o.length)
			for (var l = 0; l < o.length; l++) {
				var d = o[l];
				$(d).attr("class").includes("before") || n.items.push({
					title: $(d).find(".text").text(),
					page: $(d).attr("data-page"),
					icon: $(d).attr("data-icon")
				})
			}
		e.push(n)
	}
	return e
}

function addItem(e, t, a) {
	$("<div class='item parent p666 nochild'>" + buildItem(t, e, a, " cover child") + "<div class='items menus'></div></div>").appendTo("#builder"), hook(!0)
}

function deleteItem(e) {
	$(e).parent().attr("class").includes("cover") ? $(e).parent().parent(".item.parent").remove() : $(e).parent(".item.child").remove(), hook(!0)
}

function createSaveModal() {
	createModal({
		title: "Save menu",
		tip: "Choose a name. Save this menu and use it in themes",
		content: '<label>Name</label><input type="text" class="form-control" id="name" name="name" value="' + $menu_name + '"><input name="data" type="hidden" value=\'' + JSON.stringify(dom_to_json()) + "'>",
		buttons: [
			["btn-success", "Save", "saveMenu()"]
		]
	})
}

function saveMenu() {
	$menu_name = $(document).find("#name").val(), be_cli({
		action: "admin_save_menu",
		data: $(".modal form").serialize(),
		dataType: "html",
		domTarget: ".watermark"
	})
}

function createEditModal(e) {
	$selected_e = e;
	var t = $(e).parent(".item.face");
	$selected_item = t;
	var a = t.find(".text").text(),
		i = t.attr("data-page"),
		n = t.attr("data-icon");
	createModal({
		title: "Edit a menu item",
		tip: "Don't forget to save the menu after editing",
		inputs: [{
			label: "Title",
			name: "title",
			tip: "Use # before title to make theme load text from languages",
			type: "text",
			value: a
		}, {
			label: "Address",
			name: "addr",
			type: "text",
			value: i
		}, {
			label: "Icon",
			name: "icon",
			type: "text",
			value: n,
			tip: "Click <a class='btn btn-sm btn-primary mb_ish'>here</a> to select or copy the code from <a href='https://materialdesignicons.com/'>materialdesignicons.com</a> and paste it here"
		}],
		buttons: [
			["btn-primary", "Edit", '$($selected_item).attr("data-page",$(document).find("#addr").val());$($selected_item).attr("data-icon",$(document).find("#icon").val());$($selected_item).find(".text").text($(document).find("#title").val());closeModal();hook();']
		]
	})
}

function createIconModal() {
	createModal({
		title: "Select an icon",
		inputs: [{
			label: "Search",
			name: "title",
			type: "text",
			attr: "onkeydown='createIconModalContent($(this).val())' onpaste='createIconModalContent($(this).val())' "
		}],
		content: "<div id='icons' class='icons_wrapper'></div>",
		buttons: []
	}), createIconModalContent()
}

function createIconModalContent(e) {
	var t = "";
	$.each(getIconList(), function(a, i) {
		e && !i.includes(e) || (t += "<span class='mdi mdi-" + i + "'></span>")
	}), $(document).find("#icons").html(t), $(document).off("click", "#icons .mdi"), $(document).on("click", "#icons .mdi", function(e) {
		var t = $(this).attr("class").substr(8);
		$selected_item.attr("data-icon", t), closeModal(), createEditModal($selected_e)
	})
}

function _confirm_remove_menu_group(e) {
	createModal({
		title: "Confirm",
		content: "Do you really want to remove <i><b>" + e + "</b></i> menu group?<br><b>Make sure</b> theme is not using this menu group <b>before</b> removing it<br><br>",
		buttons: [
			["btn-danger", "Confirm", 'remove_menu_group("' + e + '")']
		]
	})
}

function remove_menu_group(e) {
	be_cli({
		action: "admin_remove_menu",
		data: {
			name: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function __hook(e) {
	!0 === e && ($__pageWidgets = __translate_doms_to_data(), $("#builder .row").html(" "), __translate_data_to_doms()), $("#builder .row .item.child .move").draggable({
		revert: !0,
		start: function() {
			$("#builder").addClass("dragging"), $(this).parent(".item.cover").addClass("being_dragged")
		},
		stop: function() {
			$("#builder").removeClass("dragging"), $(this).parent(".item.cover").removeClass("being_dragged")
		}
	}), $("#builder .row .item.before").droppable({
		drop: __sortHandle
	}), $("#builder .row").disableSelection(), $("[data-toggle=tooltip]").tooltip({
		boundary: "window"
	}), $(document).find(".tooltip").remove()
}

function __sortHandle(e, t) {
	var a = e.target,
		i = t.draggable.parent(".item.cover");
	$(__translate_data_to_dom($(i).attr("id"))).insertBefore($(a)), $(i).remove(), __hook(!0)
}

function __translate_data_to_doms() {
	if (Object.keys($__pageWidgets).length)
		for (var e in $__pageWidgets) $("#builder .row").append(__translate_data_to_dom(e))
}

function __translate_data_to_dom(e) {
	var t = $__pageWidgets[e],
		a = t.type,
		i = t.sett,
		n = a.split("_");
	n = n[n.length - 1], n = "spotify" == a && i.type ? i.type : n;
	var o = i.size ? i.size : null,
		l = i.columns ? i.columns : null,
		d = i.rows ? i.rows : null,
		s = i.limit ? i.limit : null,
		r = i.width ? i.width : 12;
	s = "genre_slider" == a ? 10 : s;
	var c = "<div class='display type_" + a + " display_" + n + " size_" + (o = "genre_slider" == a || "artist_slider" == a ? "medium" : o) + " rows_" + d + " cols_" + l + " '>";
	if ("slider" == n && (o && d && s)) {
		c += "<div class='display_slider'>";
		for (var u = 1; u <= d; u++) {
			c += "<div class='display_slider_row'>";
			for (var m = 1; m <= s / d; m++) c += "<div class='display_slider_item display_item'><div class='display_slider_cover display_cover'></div><div class='display_slider_text display_text'></div></div>";
			c += "</div>"
		}
		c += "</div>"
	}
	if ("list" == n && (l && s)) {
		c += "<div class='display_list'>";
		for (u = 1; u <= l; u++) {
			c += "<div class='display_list_col'>";
			for (m = 1; m <= s / l; m++) c += "<div class='display_list_item display_item'><div class='display_list_cover display_cover'></div><div class='display_list_text display_text'></div></div>";
			c += "</div>"
		}
		c += "</div>"
	}
	if ("table" == n && s) {
		c += "<div class='display_table'>", c += "<div class='display_table_head'></div>";
		for (m = 1; m <= s; m++) c += "<div class='display_table_item display_item'><div class='display_table_cover display_cover'></div><div class='display_table_text display_text'></div></div>";
		c += "</div>"
	}
	return c += "</div>", "<div class='col-12 col-lg-" + r + "'><div class='item face before cover'></div><div class='p666'><div class='item face cover child type_" + a + " display_" + n + "' id='" + e + "'><div class='move' data-toggle='tooltip' title='Move this widget'><span class='mdi mdi-drag-variant'></span></div><div class='text'><i>[ " + a + " ]</i>" + i.title + "</div>" + c + "<div class='buttons'><span class='edit pb_hei' data-toggle='tooltip' title='Edit'></span><span class='copy pb_hci' data-toggle='tooltip' title='Copy'></span><span class='delete pb_hdi' data-toggle='tooltip' title='Delete'></span></div></div></div></div>"
}

function __translate_doms_to_data() {
	for (var e = $(".item.child"), t = {}, a = 0; a < e.length; a++) {
		var i = __translate_dom_to_data($(e[a]), !1);
		t[i.sett.wid] = i
	}
	return t
}

function __translate_dom_to_data(e, t) {
	var a = e.attr("id"),
		i = $__pageWidgets[a];
	return $__pageWidgets[a].sett.title = $("<div>" + i.sett.title + "</div>").text(), {
		type: i.type,
		sett: i.sett
	}
}

function __handler_clicked_new_item() {
	createModal({
		title: "Creating new page-element",
		tip: "Type in a title and choose element type",
		inputs: [{
			type: "text",
			name: "title",
			label: "Title"
		}, {
			type: "select",
			name: "type",
			label: "Type",
			values: [
				["album_slider", "Album Slider"],
				["album_table", "Album Table"],
				["album_list", "Album List"],
				["track_slider", "Track Slider"],
				["track_table", "Track Table"],
				["track_list", "Track List"],
				["artist_slider", "Artist Slider"],
				["spotify", "Spotify Track Playlist"],
				["genre_slider", "Genre Slider"],
				["playlist_slider", "Playlist Slider"],
				["user_slider", "User Slider"],
				["html", "HTML or Text"],
				["pl", "Advertisement Place"]
			]
		}],
		buttons: [
			["btn-primary", "Add", '__dom_make_item( $(".modal").find("#title").val(), $(".modal").find("#type").val(), true )']
		]
	})
}

function __handler_edit_item(e) {
	var t = __translate_dom_to_data($(e).parents(".item")),
		a = [{
			type: "text",
			name: "title",
			label: "Title",
			value: t.sett.title,
			tip: 'If you wish to make translatable titles, instead of writing a name like "Most Popular" use "#most_popular" then enter the real title in Language-Editor for every language',
			group: "a"
		}, {
			type: "text",
			name: "linked",
			label: "Linked page",
			value: t.sett.linked,
			group: "a"
		}, {
			type: "select",
			name: "width",
			label: "Width",
			value: t.sett.width ? t.sett.width : 12,
			values: [
				["12", "Full"],
				["6", "Half"]
			],
			group: "b"
		}],
		i = "spotify" == t.type ? "spotify" : t.type.split("_")[0],
		n = "spotify" == t.type ? "spotify" : t.type.split("_")[1];
	["track", "album", "artist", "spotify", "user", "playlist"].includes(i) && a.push({
		type: "select",
		name: "pagination",
		label: "Pagination",
		value: t.sett.pagination,
		values: [
			["0", "Off"],
			["1", "On"]
		],
		group: "a"
	}), "spotify" == i && (a.push({
		type: "text",
		name: "id",
		label: 'Playlist ID <a class="btn btn-sm btn-primary pb_hss" data-target="' + t.sett.wid + '">Search for playlists</a>',
		tip: "<b>Save your changes before starting the search</b>",
		value: t.sett.id,
		group: "c"
	}), a.push({
		type: "select",
		name: "type",
		label: "Widget Type",
		values: [
			["slider", "Track Slider"],
			["list", "Track List"],
			["table", "Track Table"]
		],
		value: t.sett.type,
		tip: "Also enter Row & Size for slider<br>Also enter Columns for List",
		group: "b"
	})), "album" == i && a.push({
		type: "select_multi",
		name: "album_type",
		label: "[filter] Album type",
		values: [
			["all", "All"],
			["single", "Single"],
			["mixtape", "Mixtape"],
			["compilation", "Compilation"],
			["studio", "Studio"]
		],
		value: t.sett.album_type ? t.sett.album_type : "all",
		group: "c"
	}), "artist" == i && a.push({
		type: "select",
		name: "artist_verified",
		label: "[filter] Verified",
		values: [
			["all", "All"],
			["yes", "Verified Only"],
			["no", "Un-Verified Only"]
		],
		value: t.sett.artist_verified ? t.sett.artist_verified : "all",
		group: "c"
	}), ["track", "album"].includes(i) && (a.push({
		type: "select",
		name: "source",
		label: "[filter] Source",
		values: [
			["all", "All"],
			["youtube", "Youtube only"],
			["local", "Local only"]
		],
		value: t.sett.source,
		group: "c"
	}), a.push({
		type: "select",
		name: "price",
		label: "[filter] Price",
		values: [
			["all", "All"],
			["free", "Free"],
			["priced", "Priced"]
		],
		value: t.sett.price,
		group: "c"
	}), a.push({
		type: "select_multi",
		name: "genre",
		label: "[filter] Genre",
		values: $__genres,
		value: t.sett.genre ? t.sett.genre : "all",
		group: "c"
	}), a.push({
		type: "text",
		name: "user_id",
		label: "[filter] User ID",
		value: t.sett.user_id,
		tip: "If you want to display items from a certain user, enter that user ID here",
		group: "c"
	})), "slider" != n && "spotify" != n || (a.push({
		type: "select",
		name: "size",
		label: "Size",
		values: [
			["small", "Small"],
			["medium", "Medium"],
			["large", "Large"]
		],
		value: t.sett.size,
		group: "b"
	}), a.push({
		type: "select",
		name: "rows",
		label: "Rows",
		values: [
			["1", "1"],
			["2", "2"],
			["3", "3"],
			["4", "4"],
			["5", "5"],
			["6", "6"]
		],
		value: t.sett.rows,
		group: "b"
	})), "list" != n && "spotify" != n || a.push({
		type: "select",
		name: "columns",
		label: "Columns",
		values: [
			["1", "1"],
			["2", "2"],
			["3", "3"]
		],
		value: t.sett.columns,
		group: "b"
	}), "html" == i && a.push({
		type: "textarea",
		name: "html",
		label: "HTML code OR pure text",
		value: t.sett.html,
		group: "c"
	}), "pl" == i && (a.push({
		type: "hidden",
		name: "pl_code",
		value: t.sett.pl_code
	}), a.push({
		type: "select",
		name: "banner_size",
		label: "Size",
		tip: "Approximate width*height (px) of this widget for a banner",
		value: t.sett.banner_size,
		group: "c",
		values: $__banner_sizes
	}), a.push({
		type: "text",
		name: "banner_pl_name",
		label: "Detail",
		tip: "Short detail about this ad placement. Example: Index page - under `Top Artists`.<br><b>Detail is like ID of this ad place, no two ID should be same, make sure you enter different detail for each advertisement place</b>",
		value: t.sett.banner_pl_name,
		group: "c"
	})), "track" == i && a.push({
		type: "select",
		name: "sort",
		label: "Sort By",
		values: [
			["title", "Title"],
			["spotify_hits", "Spotify popularity score"],
			["play_full", "Most played"],
			["play_skip", "Most skipped"],
			["play_full_m", "Most played monthly"],
			["play_skip_m", "Most skipped monthly"],
			["views", "Most viewed"],
			["likes", "Most liked"],
			["reposts", "Most reposted"],
			["comments", "Most commented"],
			["playlisteds", "Most added to playlist"],
			["downloads", "Most downloaded"],
			["purchased", "Most purchased"],
			["time_release", "Release time"],
			["time_play", "Play time"],
			["time_add", "Creation time"]
		],
		value: t.sett.sort,
		group: "c"
	}), "album" == i && a.push({
		type: "select",
		name: "sort",
		label: "Sort By",
		values: [
			["title", "Title"],
			["spotify_hits", "Spotify popularity score"],
			["play_full", "Most played"],
			["play_skip", "Most skipped"],
			["play_full_m", "Most played monthly"],
			["play_skip_m", "Most skipped monthly"],
			["views", "Most viewed"],
			["time_release", "Release time"],
			["time_play", "Play time"],
			["time_add", "Creation time"]
		],
		value: t.sett.sort,
		group: "c"
	}), "artist" == i && a.push({
		type: "select",
		name: "sort",
		label: "Sort By",
		values: [
			["name", "Name"],
			["spotify_hits", "Spotify popularity score"],
			["play_full", "Most played"],
			["play_skip", "Most skipped"],
			["play_full_m", "Most played monthly"],
			["play_skip_m", "Most skipped monthly"],
			["views", "Most viewed"],
			["time_play", "Play time"],
			["time_add", "Creation time"]
		],
		value: t.sett.sort,
		group: "c"
	}), "playlist" == i && a.push({
		type: "select",
		name: "sort",
		label: "Sort By",
		values: [
			["name", "Name"],
			["likes", "Likes"],
			["followers", "Subscribers"],
			["views", "Views"],
			["time_add", "Creation time"],
			["time_update", "Update time"]
		],
		value: t.sett.sort,
		group: "c"
	}), "user" == i && a.push({
		type: "select",
		name: "sort",
		label: "Sort By",
		values: [
			["followers", "Followers"],
			["followings", "Followings"],
			["likes", "Likes"],
			["reposts", "Reposts"],
			["comments", "Comments"],
			["comments_likes", "Comments received likes"],
			["comments_replied", "Comments received replies"],
			["media_comments", "Medias received comments"],
			["media_likes", "Medias received likes"],
			["media_uploads", "Uploaded Medias"],
			["playlists", "Playlists"],
			["playlists_likes", "Playlists received likes"],
			["playlists_followers", "Playlists subscribers"],
			["time_add", "Sign up date"]
		],
		value: t.sett.sort,
		group: "c"
	}), "genre" != i && "html" != i && "pl" != i && a.push({
		type: "text",
		name: "limit",
		label: "Limit",
		value: t.sett.limit,
		group: "b"
	}), createModal({
		title: "Editing page-element",
		inputs: a,
		groups: {
			a: "General",
			b: "Design",
			c: "Content"
		},
		buttons: [
			["btn-primary", "Edit", '__dom_edit_item("' + t.sett.wid + '")']
		]
	}), $("#album_type").chosen({
		max_selected_options: 5
	}), $("#genre").chosen({
		max_selected_options: 3
	})
}

function __handler_spotify_searcher(e) {
	closeModal(), createModal({
		title: "Searching for spotify playlist",
		inputs: [{
			type: "text",
			name: "query",
			label: "Eenter a query and search spotify for it"
		}],
		buttons: [
			["btn-primary", "Search", '__dom_search_spotify("' + e + '")']
		],
		content: "<div class='modalResult'></div>"
	})
}

function __handler_spotify_selector(e, t) {
	getModal(!0);
	var a = __translate_dom_to_data($("#" + e));
	a.type, a.title;
	a.sett.id = t, $("#" + e).parent(".p666").html(__translate_data_to_dom(e)), closeModal(), $("#" + e).find("span.edit").click()
}

function __handler_save_page() {
	createModal({
		title: "Saving page build",
		tip: "Save the page you just modified",
		inputs: [{
			type: "text",
			name: "name",
			label: "Name",
			tip: "Page name only containing a-z, numbers and underline",
			value: $__pageName
		}, {
			type: "text",
			name: "url",
			tip: $_home + "Your_Chosen_Link",
			label: "Link",
			value: $__pageUrl
		}],
		buttons: [
			["btn-success", "Save", "__finalize_edit()"]
		]
	})
}

function __finalize_edit() {
	var e = getModal(!0);
	be_cli({
		domTarget: ".watermark",
		action: "admin_save_page",
		data: {
			name: e.name,
			url: e.url,
			data: JSON.stringify(__translate_doms_to_data())
		},
		callBack: function(t, a) {
			t && ($__pageName = e.name, $__pageUrl = e.url, history.replaceState(null, document.title, $_home + "admin_page_editor?name=" + $__pageName))
		}
	})
}

function __dom_edit_item(e) {
	var t = __translate_dom_to_data($("#" + e)),
		a = null,
		i = a = "html" === t.type ? getModal(!0) : getModal(!0, !0);
	i.wid = t.sett.wid, i.title = $("<div>" + i.title + "</div>").text(), $__pageWidgets[t.sett.wid].sett = a, $("#" + e).parent(".p666").html(__translate_data_to_dom(t.sett.wid)), __hook(!0), closeModal(), warn_user()
}

function __dom_make_item(e, t, a, i) {
	var n = Math.random().toString(36).substr(2, 8);
	(i = i || {
		limit: 10
	}).title = e, i.wid = n, $__pageWidgets[n] = {
		type: t,
		sett: i
	}, $(__translate_data_to_dom(n)).appendTo("#builder .row"), __hook(!0), closeModal(), !0 === a && $(document).find(".col-12:last-child").find(".edit").click()
}

function __dom_remove_item(e) {
	$(e).parents(".item").remove(), __hook(!0)
}

function __dom_copy_item(e) {
	var t = __translate_dom_to_data($(e).parents(".item"));
	__dom_make_item(t.sett.title + " copy", t.type, !1, Object.assign({}, t.sett)), $("html, body").animate({
		scrollTop: $(document).height() - $(window).height()
	}, 300)
}

function __dom_search_spotify(e) {
	var t = getModal(!0);
	t.widID = e, be_cli({
		action: "admin_save_page_snoop_spotify",
		data: t,
		domTarget: ".modalResult"
	})
}

function warn_user() {
	$(".warn_wrapper").html("<div class='alert alert-danger alert-warn'>Don't forget to save the page</div>")
}

function _confirm_remove_page(e, t) {
	createModal({
		title: "Confirm",
		content: "Do you really want to remove <i><b>" + t + "</b></i> page build?<br><br>",
		buttons: [
			["btn-danger", "Confirm", 'remove_page("' + e + '")']
		]
	})
}

function remove_page(e) {
	be_cli({
		action: "admin_remove_page",
		domTarget: ".watermark",
		data: {
			ID: e
		},
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}

function update_widget() {
	if (add_log("==================="), $widgets.length) {
		var e = $widgets.shift();
		add_log("Updating spotify widget ID:" + e), be_cli({
			action: "admin_tool_update_widget",
			data: {
				ID: e
			},
			domTarget: ".watermark",
			callBack: function(t, a) {
				t ? (add_log("<b>Successfully</b> updated widget ID:" + e), add_log("===> Result: " + a)) : (add_log("<b>Failed</b> to update widget ID:" + e), add_log("===> Error: " + a)), update_widget()
			}
		})
	} else add_log("No widgets to update. Nothing to do!")
}

function add_log(e) {
	$(".logs").append("<div class='log'>" + e + "</div>")
}

function translate(e) {
	if ($ids.length) {
		var t = $ids.shift();
		be_cli({
			action: "admin_tools_translate",
			domTarget: ".watermark",
			data: {
				ID: t,
				code: e
			},
			callBack: function(t, a) {
				if (t) $("#logs").append("<div class='log'>" + a + "</div>"), setTimeout(function() {
					translate(e)
				}, 5e3);
				else {
					if ("finished" == a) return;
					alert("Something went wrong. Retry. " + a)
				}
			}
		})
	}
}

function save_notification_form() {
	var e = {
			ua_acts: null,
			ua_feeds: null,
			ua_nots: null,
			ua_emails: null,
			admin_ids: $(document).find("[name=not_adids]").val()
		},
		t = {};
	$(".box.nots input[type=checkbox]:checked").each(function(e) {
		var a = $(this).attr("name").split("_"),
			i = a[1],
			n = a[0];
		void 0 === t[n] && (t[n] = []), t[n].push(i)
	}), t.feed && (e.ua_feeds = t.feed.join(",")), t.act && (e.ua_acts = t.act.join(",")), t.not && (e.ua_nots = t.not.join(",")), t.email && (e.ua_emails = t.email.join(",")), be_cli({
		action: "admin_save_setting_notifications",
		data: e,
		domTarget: ".watermark",
		callBack: function(e, t) {
			console.log(e, t)
		}
	})
}
Chart.defaults.global.tooltips.mode = "x-axis", Chart.defaults.global.legend.position = "bottom", Chart.defaults.global.maintainAspectRatio = !1, Chart.defaults.global.responsive = !0, Chart.defaults.global.defaultFontSize = 10, Chart.defaults.global.legend.labels.boxWidth = 30, Chart.defaults.global.tooltips.bodyFontSize = 11, Chart.defaults.global.tooltips.titleFontSize = 12, $(document).on("click", ".ash.suggestion", function() {
	choose_suggestion($(this).attr("data-target"), $(this).attr("data-value"))
}), $(document).on("click", ".edit_album_handle", function() {
	edit_album_modal($(this).attr("data-hook"))
}), $(document).on("click", ".delete_album_handle", function() {
	delete_albums_modal($(this).attr("data-hook"))
}), $(document).on("click", ".edit_artist_handle", function() {
	edit_artist_modal($(this).attr("data-hook"))
}), $(document).on("click", ".delete_artist_handle", function() {
	delete_artists_modal($(this).attr("data-hook"))
}), $(document).on("click", ".edit_track_handle", function() {
	edit_track_modal($(this).attr("data-hook"))
}), $(document).on("click", ".delete_track_handle", function() {
	delete_tracks_modal($(this).attr("data-hook"))
}), $(document).on("click", ".new_track_handle", function() {
	new_track_modal()
}), $(document).on("click", ".edit_genre_handle", function() {
	var e = $(this).attr("data-hook");
	console.log($__genres[e]), edit_genre_modal($__genres[e])
}), $(document).on("click", ".delete_genre_handle", function() {
	delete_genres_modal($(this).attr("data-hook"))
}), $(document).on("click", ".recover_genre_handle", function() {
	recover_genre($(this).attr("data-hook"))
}), $(document).on("click", ".truncate_genre_handle", function() {
	truncate_genre($(this).attr("data-hook"))
}), $(document).on("click", ".new_genre_handle", function() {
	new_genre_modal()
}), $(document).on("click", ".delete_source_handle", function() {
	delete_sources($(this).attr("data-hook"))
}), $(document).on("click", ".delete_source_waves_handle", function() {
	delete_source_waves($(this).attr("data-hook"))
}), $(document).on("click", ".new_source_handle", function() {
	new_source_modal($(this).attr("data-hook"))
}), $(document).on("click", ".edit_user_handle", function() {
	edit_user_modal($(this).attr("data-hook"))
}), $(document).on("click", ".delete_user_handle", function() {
	delete_users_modal($(this).attr("data-hook"))
}), $(document).on("click", ".connect_artist_handle", function() {
	connect_artist_modal($(this).attr("data-hook"))
}), $(document).on("click", ".disconnect_artist_handle", function() {
	disconnect_artist($(this).attr("data-hook"))
}), $(document).on("click", ".verify_user_handle", function() {
	verify_user($(this).attr("data-hook"))
}), $(document).on("click", ".accept_artist_handle", function() {
	accept_artist_request($(this).attr("data-hook"))
}), $(document).on("click", ".reject_artist_handle", function() {
	reject_artist_request($(this).attr("data-hook"))
}), $(document).on("click", ".delete_comment_handle", function() {
	delete_comments($(this).attr("data-hook"))
}), $(document).on("click", ".approve_comment_handle", function() {
	approve_comments($(this).attr("data-hook"))
}), $(document).on("click", ".remove_user_group_handle", function() {
	var e = $(this).attr("data-hook");
	_confirm_remove_user_group($(this).attr("data-name"), e)
}), $(document).on("click", ".add_user_group_handle", function() {
	add_new_user_group_modal()
}), $(document).on("click", ".approve_payment_handle", function() {
	approve_payments($(this).attr("data-hook"))
}), $(document).on("click", ".reject_payment_handle", function() {
	reject_payments($(this).attr("data-hook"))
}), $(document).on("click", ".approve_withdraw_handle", function() {
	approve_withdraw($(this).attr("data-hook"))
}), $(document).on("click", ".reject_withdraw_handle", function() {
	reject_withdraw($(this).attr("data-hook"))
}), $(document).on("click", ".dismiss_report_handle", function() {
	dismiss_reports($(this).attr("data-hook"))
}), $(document).on("click", ".admin_ad_handle", function() {
	var e = $(this).attr("data-action"),
		t = $(this).attr("data-hook");
	be_cli({
		action: "admin_manage_ads",
		data: {
			hook: t,
			sta: e
		},
		domTarget: ".watermark",
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}), $(document).on("click", ".admin_ad_edit_handle", function() {
	edit_ad_modal($(this).attr("data-hook"))
}), $(document).on("click", ".remove_lang_handle", function() {
	_confirm_remove_lang($(this).attr("data-hook"), $(this).attr("data-name"))
}), $(document).on("click", ".new_lang_handle", function() {
	__add_new_language_modal()
}), $(document).on("click", ".edit_lang_handle", function() {
	__edit_language($(this).attr("data-hook"), $(this).attr("data-val"), $(this).attr("data-en-val"))
}), $(document).on("click", ".mb_cem_handle", function() {
	createEditModal(this)
}), $(document).on("click", ".mb_di_handle", function() {
	deleteItem(this)
}), $(document).on("click", ".mb_ish", function() {
	$(document).find(".modal .buttons .btn-primary").click(), createIconModal()
}), $(document).on("click", ".remove_menu_handle", function() {
	_confirm_remove_menu_group($(this).attr("data-name"))
}), $(document).on("click", ".add_menu_item_handle", function() {
	addItem("title", "page", "card")
}), $(document).on("click", ".save_menu_handle", function() {
	createSaveModal()
}), $(document).on("click", ".remove_page_handle", function() {
	_confirm_remove_page($(this).attr("data-hook"), $(this).attr("data-name"))
}), $(document).on("click", ".index_page_handle", function() {
	var e = $(this).attr("data-hook");
	be_cli({
		action: "admin_index_page",
		domTarget: ".watermark",
		data: {
			ID: e
		},
		callBack: function(e, t) {
			e && window.location.reload()
		}
	})
}), $(document).on("click", ".new_page_handle", function() {
	__handler_clicked_new_item()
}), $(document).on("click", ".save_page_handle", function() {
	__handler_save_page()
}), $(document).on("click", ".aspss_handle", function() {
	var e = $(this).attr("data-hook");
	__handler_spotify_selector($(this).attr("data-widget-id"), e)
}), $(document).on("click", ".pb_hss", function() {
	__handler_spotify_searcher($(this).attr("data-target"))
}), $(document).on("click", ".pb_hei", function() {
	__handler_edit_item(this)
}), $(document).on("click", ".pb_hci", function() {
	__dom_copy_item(this)
}), $(document).on("click", ".pb_hdi", function() {
	__dom_remove_item(this)
});
var ids = [];
$(document).on("click", "[type=checkbox]", function(e) {
	if ("ID" == $(this).val().substr(0, 2)) {
		var t = $(this).val().substr(2);
		if (this.checked) ids.includes(t) || ids.push(t);
		else {
			var a = ids.indexOf(t);
			a > -1 && ids.splice(a, 1)
		}
		ids.length ? $("table tfoot .btn.hoi").css("opacity", "1") : $("table tfoot .btn.hoi").css("opacity", "0.2")
	} else "all" == $(this).val() && document.querySelectorAll("input[type=checkbox]").forEach(function(e) {
		"ID" == $(e).val().substr(0, 2) && $(e).click()
	})
}), $(document).on("change", ".sort_wrapper select", function(e) {
	window.location = $(this).find("option:selected").val()
}), $(document).on("click", "#sidebar ul li", function(e) {
	if ($(this).hasClass("parent")) {
		if ($(this).hasClass("active")) return;
		if ($(this).hasClass("has-child")) return $("#sidebar ul li.parent.active").removeClass("active"), void $(this).addClass("active")
	}
	window.location = $_home + $(this).attr("data-url")
}), $(document).on("click", ".menu_handler", function(e) {
	$("body").toggleClass("active_menu")
}), $(document).ready(function() {
	$("[data-toggle=tooltip]").tooltip({
		boundary: "window"
	}), $("input[type=color]").length && $("input[type=color]").spectrum({
		showInput: !0,
		preferredFormat: "hex"
	})
});